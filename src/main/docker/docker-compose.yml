#################################################################################################
#
# Copyright 2019 Ericsson AB.
# For a full list of individual contributors, please see the commit history.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
##################################################################################################
# docker-compose commands
#
# run:         docker-compose up
# stop:        docker-compose stop
# stop/remove: docker-compose down --volumes
#
# Cleanup/Remove (if needed):
#     Dangling Volumes:   docker volume rm `docker volume ls -q -f dangling=true`
#     Unused Images:      docker images -q | xargs docker rmi
#     Stopped containers: docker rm `docker ps -a -q`
#
# Maintainer: Eiffel-Community
##################################################################################################
version: "2.1"
services:
  mongodb:
    restart: always
    image: ${MONGODB_IMAGE}
    expose:
      - "27017"
    ports:
      - "${MONGODB_PORT}:27017"
    healthcheck:
      test: ["CMD-SHELL","echo", "'db.stats().ok' | mongo localhost:27017/test", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      eiffel_2.0_1:
        aliases:
          - mongodb

  rabbitmq:
    restart: always
    image: ${RABBITMQ_IMAGE}
    expose:
      - "15672"
      - "5672"
    ports:
      - "${RABBITMQ_WEB_PORT}:15672"
      - "${RABBITMQ_AMQP_PORT}:5672"
    healthcheck:
      test: ["CMD-SHELL", "if rabbitmqctl status; then \nexit 0 \nfi \nexit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      eiffel_2.0_1:
        aliases:
          - rabbitmq
    environment:
      - RABBITMQ_USERNAME=myuser
      - RABBITMQ_PASSWORD=myuser
      - RABBITMQ_VHOST=/

  eiffel-er:
    restart: always
    image: ${EIFFEL_ER_IMAGE}
    expose:
      - "8080"
    ports:
      - "${EIFFEL_ER_PORT}:8080"
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      eiffel_2.0_1:
        aliases:
          - eiffel-er
    environment:   # Overrides settings in config file in catalina folder. OBS --> skip quotes for rabbitmq.bindingKey value
      # No config file copied to catalina folder in Dockerfile, only uses env vars below ;-)
      # /eventrepository removed in contextpath
      - server.contextPath=/
      - server.port=8080
      - rabbitmq.host=rabbitmq
      - rabbitmq.componentName=eventrepository
      - rabbitmq.port=5672
      - rabbitmq.domainId=ei-domain
      - rabbitmq.durable=true
      - rabbitmq.user=myuser
      - rabbitmq.password=myuser
      - rabbitmq.exchangeName=ei-exchange
      - rabbitmq.bindingKey=#
      - rabbitmq.autoDelete=false
      - rabbitmq.createExchangeIfNotExisting=true
      - rabbitmq.consumerName=messageConsumer
      - mongodb.host=mongodb
      - mongodb.port=27017
      - mongodb.database=eiffel
      - mongodb.collection=events
      - mongodb.user
      - mongodb.password
      - mongodb.indexes=meta.id,links.target,links.type,meta.time,data.identity
      - mongodb.externalERs
      - search.limit=100
      - search.levels=10
      - eventrepo2.URL=
      - index.staticIndex.indexOn=false
      - index.staticIndex.filePath=src/main/resources/static_indexes.json
      - index.dynamicIndex.indexOn=false
      - index.dynamicIndex.indexCreationDay=SUNDAY
      - index.dynamicIndex.indexCreationTime=11:50:00
      - index.dynamicIndex.maxIndexesCount=5
      - index.dynamicIndex.filePath=src/main/resources/dynamic_indexing.json
      - index.dynamicIndex.fileUpdatePeriod=30
      - WAIT_MB_HOSTS=rabbitmq:${RABBITMQ_WEB_PORT}
      - WAIT_DB_HOSTS=mongodb:${MONGODB_PORT}


  mail-server:
    image: ${MAILSERVER_IMAGE}
    expose:
      - "1025"
      - "8025"
    ports:
      - "${MAIL_SMTP_PORT}:1025"
      - "${MAIL_WEB_PORT}:8025"
    depends_on:
      - mongodb
    environment:
      MH_STORAGE: mongodb
      MH_MONGO_URI: mongodb:27017
      MH_MONGO_COLLECTION: messages
      MH_MONGO_DB: mailhog
    networks:
      eiffel_2.0_1:
        aliases:
          - mail-server


  generate:
    restart: always
    image: ${REMREM_GENERATE_IMAGE}
    expose:
      - "8080"
    ports:
      - "${REMREM_GENERATE_PORT}:8080"
    environment:
      - server.port=8080
      - jasypt.encryptor.password=
      - activedirectory.generate.enabled=false
      - activedirectory.ldapUrl=
      - activedirectory.managerPassword=
      - activedirectory.managerDn=
      - activedirectory.rootDn=
      - activedirectory.userSearchFilter=
      - logging.level.root=OFF
      - logging.level.org.springframework.web=DEBUG
      - logging.level.com.ericsson.eiffel.remrem.producer=DEBUG
    networks:
      eiffel_2.0_1:
        aliases:
          - generate


  publish:
    restart: always
    image: ${REMREM_PUBLISH_IMAGE}
    expose:
      - "8080"
    ports:
      - "${REMREM_PUBLISH_PORT}:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - server.port=8080
      - jasypt.encryptor.password=
      - rabbitmq.instances.jsonlist=${REMREM_PUBLISH_RABBITMQ_INSTANCES_LIST}
      - generate.server.uri=http://generate:8080
      - generate.server.path=
      - activedirectory.publish.enabled=false
      - activedirectory.ldapUrl=
      - activedirectory.managerPassword=
      - activedirectory.managerDn=
      - activedirectory.rootDn=
      - activedirectory.userSearchFilter=
      - logging.level.root=OFF
      - logging.level.org.springframework.web=DEBUG
      - logging.level.com.ericsson.eiffel.remrem.producer=DEBUG
      - WAIT_MB_HOSTS=rabbitmq:${RABBITMQ_WEB_PORT}
    networks:
      eiffel_2.0_1:
        aliases:
          - publish


  jenkins:
    restart: always
    image: ${JENKINS_IMAGE}
    expose:
      - "8080"
    ports:
      - "${JENKINS_PORT}:8080"
      - "50001:50000"
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - JAVA_OPTS="-Djenkins.install.runSetupWizard=false"
      - JENKINS_USERNAME=admin
      - JENKINS_PASSWORD=admin
    networks:
      eiffel_2.0_1:
        aliases:
          - jenkins


  ############### Start EI backend artifact rules #############################
  ei-backend-artifact:
    restart: always
    image: ${EI_BACKEND_IMAGE}
    expose:
      - "8080"
    ports:
      - "${EI_BACKEND_ARTIFACT_PORT}:8080"
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      eiffel_2.0_1:
        aliases:
          - ei-backend-artifact
    environment:       # Overrides settings in application config file
      - SpringApplicationName=ei-backend-artifact
      - server.port=8080
      - rules.path=/ArtifactRules.json
      - rabbitmq.host=rabbitmq
      - rabbitmq.port=${RABBITMQ_AMQP_PORT}
      - rabbitmq.domainId=ei-domain
      - rabbitmq.componentName=eiffel-intelligence-artifact
      - rabbitmq.waitlist.queue.suffix=waitlist-artifact
      - rabbitmq.exchange.name=ei-exchange
      - rabbitmq.user=myuser
      - rabbitmq.password=myuser
      - spring.data.mongodb.host=mongodb
      - spring.data.mongodb.port=${MONGODB_PORT}
      - spring.data.mongodb.database=eiffel-intelligence-artifact
      - missedNotificationDataBaseName=MissedNotification-artifact
      - search.query.prefix=object
      - aggregated.object.name=aggregatedObject
      - spring.mail.properties.mail.smtp.auth=false
      - spring.mail.properties.mail.smtp.starttls.enable=false
      - er.url=eiffel-er:${EIFFEL_ER_PORT}/search/
      - logging.level.root=OFF
      - logging.level.org.springframework.web=DEBUG
      - logging.level.com.ericsson.ei=DEBUG
      - WAIT_MB_HOSTS=rabbitmq:${RABBITMQ_WEB_PORT}
      - WAIT_DB_HOSTS=mongodb:${MONGODB_PORT}

  ############### Stop EI backend artifact rules ##############################


  ############### Start EI backend sourcechange rules ##########################
  ei-backend-sourcechange:
    restart: always
    image: ${EI_BACKEND_IMAGE}
    expose:
      - "8080"
    ports:
      - "${EI_BACKEND_SOURCECHANGE_PORT}:8080"
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      eiffel_2.0_1:
        aliases:
          - ei-backend-sourcechange
    environment:       # Overrides settings in application config file
      - SpringApplicationName=ei-backend-sourcechange
      - server.port=8080
      - rules.path=/SourceChangeObjectRules.json
      - rabbitmq.host=rabbitmq
      - rabbitmq.port=${RABBITMQ_AMQP_PORT}
      - rabbitmq.domainId=ei-domain
      - rabbitmq.componentName=eiffel-intelligence-sourcechange
      - rabbitmq.waitlist.queue.suffix=waitlist-sourcechange
      - rabbitmq.exchange.name=ei-exchange
      - rabbitmq.user=myuser
      - rabbitmq.password=myuser
      - spring.data.mongodb.host=mongodb
      - spring.data.mongodb.port=${MONGODB_PORT}
      - spring.data.mongodb.database=eiffel-intelligence-sourcechange
      - missedNotificationDataBaseName=MissedNotification-sourcechange
      - search.query.prefix=object
      - aggregated.object.name=aggregatedObject
      - spring.mail.properties.mail.smtp.auth=false
      - spring.mail.properties.mail.smtp.starttls.enable=false
      - er.url=eiffel-er:${EIFFEL_ER_PORT}/search/
      - logging.level.root=OFF
      - logging.level.org.springframework.web=DEBUG
      - logging.level.com.ericsson.ei=DEBUG
      - WAIT_MB_HOSTS=rabbitmq:${RABBITMQ_WEB_PORT}
      - WAIT_DB_HOSTS=mongodb:${MONGODB_PORT}

  ############### Stop EI backend sourcechange rules ###########################


  ############### Start EI backend testexecution rules #########################
  ei-backend-testexecution:
    restart: always
    image: ${EI_BACKEND_IMAGE}
    expose:
      - "8080"
    ports:
      - "${EI_BACKEND_TESTEXECUTION_PORT}:8080"
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      eiffel_2.0_1:
        aliases:
          - ei-backend-testexecution
    environment:       # Overrides settings in application config file
      - SpringApplicationName=ei-backend-testexecution
      - server.port=8080
      - rules.path=/TestExecutionObjectRules.json
      - rabbitmq.host=rabbitmq
      - rabbitmq.port=${RABBITMQ_AMQP_PORT}
      - rabbitmq.domainId=ei-domain
      - rabbitmq.componentName=eiffel-intelligence-testexecution
      - rabbitmq.waitlist.queue.suffix=waitlist-testexecution
      - rabbitmq.exchange.name=ei-exchange
      - rabbitmq.user=myuser
      - rabbitmq.password=myuser
      - spring.data.mongodb.host=mongodb
      - spring.data.mongodb.port=${MONGODB_PORT}
      - spring.data.mongodb.database=eiffel-intelligence-testexecution
      - missedNotificationDataBaseName=MissedNotification-testexecution
      - search.query.prefix=object
      - aggregated.object.name=aggregatedObject
      - spring.mail.host=
      - spring.mail.port=
      - spring.mail.username=
      - spring.mail.password=
      - spring.mail.properties.mail.smtp.auth=false
      - spring.mail.properties.mail.smtp.starttls.enable=false
      - er.url=eiffel-er:${EIFFEL_ER_PORT}/search/
      - logging.level.root=OFF
      - logging.level.org.springframework.web=DEBUG
      - logging.level.com.ericsson.ei=DEBUG
      - WAIT_MB_HOSTS=rabbitmq:${RABBITMQ_WEB_PORT}
      - WAIT_DB_HOSTS=mongodb:${MONGODB_PORT}

  ############### Stop EI backend testexecution rules ##########################

  ei-frontend:
    restart: always
    image: ${EI_FRONTEND_IMAGE}
    expose:
      - "8080"
    ports:
      - "${EI_FRONTEND_PORT}:8080"
    depends_on:
      - ei-backend-artifact
      - ei-backend-sourcechange
      - ei-backend-testexecution
    networks:
      eiffel_2.0_1:
        aliases:
          - ei-frontend
    environment:      # Overrides settings in application config file
      - spring.application.name=eiffel-intelligence-frontend
      - server.port=8080
      - ei.frontend.service.host=${HOST}
      - ei.frontend.service.port=${EI_FRONTEND_PORT}
      - ei.frontend.context.path=
      - ei.backend.instances.list.json.content=${EI_INSTANCES_LIST}
      - ei.backend.instances.filepath=/tmp/eiInstancesListFile.json
      - logging.level.root=OFF
      - logging.level.org.springframework.web=DEBUG
      - logging.level.com.ericsson.ei=DEBUG

networks:
  eiffel_2.0_1: