sudo: required

language: java

services:
  - docker

python:
  - "3.5"

jdk:
  - oraclejdk8

env:
  - EI_BACKEND_PORT=8099 MONGODB_PORT=27017 RABBITMQ_AMQP_PORT=5672 RABBITMQ_WEB_PORT=15672 EIFFEL_ER_PORT=8084 JENKINS_PORT=8081 MAIL_SMTP_PORT=1025 MAIL_WEB_PORT=8025


# Using default 'test' stage for our tests, and only running deploy stage
# (after merge) on master branch
stages:
  - test
  - updateGitHubPages
  - name: release
    if: branch = test-commit-message-release

# To prevent Travis from also running build on pushed git tags
branches:
  except:
    - /^[0-9]+\.[0-9]+\.[0-9]+$/


before_install:
  - git clone --depth=50 --branch=master https://github.com/eiffel-community/eiffel-intelligence.git
  - cd eiffel-intelligence
  - docker-compose up -d


install:
  - chmod +x pom.xml
  - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
  - cd target
  - export EIFFEL_WAR=$(ls *.war)
  - java -Dspring.config.location=file:../../src/integrationtest/resources/integration-test.properties -Dserver.port=${EI_BACKEND_PORT} -jar ${EIFFEL_WAR} &
  - cd ../..


after_script:
  - cd eiffel-intelligence
  - docker-compose down
  - fuser -k ${EI_BACKEND_PORT}/tcp


# Check which deploy provider. Before updateGitHubPages we need to generate the pages
# Before release we need to step version in pom and prepare release notes
before_deploy:
  - echo $TRAVIS_JOB_NAME
  - if [[ $TRAVIS_JOB_NAME = updateGitHubPages ]]; then rm -rf docs && mvn site -B; fi
  - |
    if [[ $TRAVIS_JOB_NAME = release ]]; then
      sudo apt -y install python3
      python3 -V
      ./prepare_release.sh $TRAVIS_COMMIT_MESSAGE;
    fi


# List of jobs to run, tied to specific stages
jobs:
  include:
    - stage: test
      name: functionalTests
      before_install: skip
      install: skip
      script:
        - echo "test"
        #- mvn test -B
      after_script: skip
    - stage: updateGitHubPages
      name: updateGitHubPages
      before_install: skip    # do not run again
      install: skip           # do not run again
      script: skip            # do not run default test scripts
      after_script: skip      # do not run again
      deploy:
        provider: pages
        skip_cleanup: true
        github-token: $GREN_GITHUB_TOKEN    # only in fork repo
        local_dir: docs/
        on:
          all_branches: true
    - stage: release
      name: release
      before_install: skip    # do not run again
      install: skip           # do not run again
      script: skip            # do not run again
      after_script: skip      # do not run again
      deploy:
        provider: releases
        skip_cleanup: true
        api_key: $GREN_GITHUB_TOKEN     # only in fork repo
        on:
          all_branches: true
